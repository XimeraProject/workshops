32a33
> %% src/footnotes.dtx  (with options: `htXimera')
36c37
< %%       Author:| Jim Fowler and Jeramiah Hocutt and Oscar Levin and Jason Nowell and Hans Parshall and Bart Snapp
---
> %%       Author:| Jim Fowler and Oscar Levin and Jason Nowell and Hans Parshall and Bart Snapp
57,58c58
< \newcounter{identification}
< \setcounter{identification}{0}
---
> \MakeCounter{identification}
60c60
< \newcommand{\ConfigureQuestionEnv}[2]{%
---
> \providecommand{\ConfigureQuestionEnv}[2]{%
179,187c179,192
< \setkeys{choice}{correct=false}%
< \setkeys{choice}{#1}%
< \stepcounter{choiceId}\IgnorePar%
< \HCode{<span class="choice }%
< \ifthenelse{\boolean{\choice@correct}}{\HCode{correct}}{}
< \HCode{" }
< \ifthenelse{\equal{\choice@value}{}}{}{\HCode{data-value="\choice@value" }}
< \HCode{id="choice\arabic{choiceId}">}%
< #2\HCode{</span>}}
---
>     \setkeys{choice}{correct=false}% Set default to false
>     \setkeys{choice}{#1}% Load choice keys to set which are correct.
>     \stepcounter{choiceId}\IgnorePar% Step counter to get a unique choice ID.
>     \HCode{<span class="choice }%
>     \ifthenelse{\boolean{\choice@correct}}% Check to see if a choice is "correct"
>         {\HCode{correct}}% Notify html it is correct (if it is).
>         {}% Otherwise, do nothing.
>     \HCode{" }
>     \ifthenelse{\equal{\choice@value}{}}% If choice value is empty...
>         {}% Do nothing.
>         {\HCode{data-value="\choice@value" }}% Otherwise, load the data in choice value.
>     \HCode{id="choice\arabic{choiceId}">}% Set the choice ID.
>     #2\HCode{</span>}% End the choice div.
>     }
192,196c197,206
< {\setkeys{multipleChoice}{#1}%
< \stepcounter{identification}\ifvmode \IgnorePar\fi \EndP\HCode{<div class="multiple-choice" }%
< \ifthenelse{\equal{\mc@id}{}}{}{\HCode{data-id="\mc@id" }}%
< \HCode{id="problem\arabic{identification}">}%
< }{\HCode{</div>}\IgnoreIndent}
---
>     {
>         \setkeys{multipleChoice}{#1}%
>         \stepcounter{identification}\ifvmode \IgnorePar\fi \EndP\HCode{<div class="multiple-choice" }%
>         \ifthenelse{\equal{\mc@id}{}}{}{\HCode{data-id="\mc@id" }}%
>         \HCode{id="problem\arabic{identification}">}%
>     }
>     {
>         \HCode{</div>}\IgnoreIndent
>     }
> 
245,252c255,300
< \def\feedback{\@ifnextchar[{\@feedbackcode}{\@feedbackattempt}}
< \def\@feedbackattempt{\@feedbackcode[attempt]}
< \def\@feedbackcode[#1]{\stepcounter{identification}%
< \ifvmode \IgnorePar\fi \EndP%
< \ifthenelse{\equal{#1}{attempt}}{\HCode{<div class="feedback" data-feedback="attempt" id="feedback\arabic{identification}">}}%
< {\ifthenelse{\equal{#1}{correct}}{\HCode{<div class="feedback" data-feedback="correct" id="feedback\arabic{identification}">}}%
< {\HCode{<div class="feedback" data-feedback="script" id="feedback\arabic{identification}"><script type="text/javascript">function feedback\arabic{identification}() }\{\HCode{ return \detokenize{#1}; }\}\HCode{</script>}}}}
< \def\endfeedback{\HCode{</div>}\IgnoreIndent}
---
> \renewenvironment{feedback}[1][attempt]
>     {% Start "begin feedback" code.
>         \stepcounter{identification}%
>         \ifvmode \IgnorePar\fi \EndP%
>         \ifthenelse{\equal{#1}{attempt}}
>             {% If we flag it as just an attempt then:
>                 \HCode{<div class="feedback" data-feedback="attempt" id="feedback\arabic{identification}">}
>             }% End of "attempt" flag code.
>             {% If it isn't an "attempt" flag code...
>                 \ifthenelse{\equal{#1}{correct}}
>                 {% Check to see if it is a "correct" flag instead. If so...
>                     \HCode{<div class="feedback" data-feedback="correct" id="feedback\arabic{identification}">}
>                 }% End "correct" flag.
>                 {% If it isn't a "correct" flag then we assume there is some kind of js script and load it... and pray.
>                     \HCode{<div class="feedback" data-feedback="script" id="feedback\arabic{identification}"><script type="text/javascript">function feedback\arabic{identification}() }\{\HCode{ return \detokenize{#1}; }\}\HCode{</script>}
>                 }% End "if not correct" flag.
>             }% End "if not attempt" flag
>     }% Terminate "begin feedback" code.
>     {% Start "end feedback" code.
>         \HCode{</div>}\IgnoreIndent
>     }% Terminate "end feedback" code.
> 
> %\def\feedback{\@ifnextchar[ {\@feedbackcode}{\@feedbackattempt}}% Set default to attempt.
> %\def\@feedbackattempt{\@feedbackcode[attempt]}
> %\def\@feedbackcode[#1]
> %    {% Start "begin feedback" code.
> %        \stepcounter{identification}%
> %        \ifvmode \IgnorePar\fi \EndP%
> %        \ifthenelse{\equal{#1}{attempt}}
> %            {% If we flag it as just an attempt then:
> %                \HCode{<div class="feedback" data-feedback="attempt" id="feedback\arabic{identification}">}
> %            }% End of "attempt" flag code.
> %            {% If it isn't an "attempt" flag code...
> %                \ifthenelse{\equal{#1}{correct}}
> %                {% Check to see if it is a "correct" flag instead. If so...
> %                    \HCode{<div class="feedback" data-feedback="correct" id="feedback\arabic{identification}">}
> %                }% End "correct" flag.
> %                {% If it isn't a "correct" flag then we assume there is some kind of js script and load it... and pray.
> %                    \HCode{<div class="feedback" data-feedback="script" id="feedback\arabic{identification}"><script type="text/javascript">function feedback\arabic{identification}() }\{\HCode{ return \detokenize{#1}; }\}\HCode{</script>}
> %                }% End "if not correct" flag.
> %            }% End "if not attempt" flag
> %    }% Terminate "begin feedback" code.
> %\def\endfeedback
> %    {% Start "end feedback" code.
> %        \HCode{</div>}\IgnoreIndent
> %    }% Terminate "end feedback" code.
272a321,379
> %\DescribeMacro{\footnote}{% Written by Jason Nowell
> %    Standard Footnotes in pdf, but expandable parenthetical online. Supports different coloring by using |\colorlet{fncolor}{COLOR}| and setting COLOR to whatever color you want (Default is blue).
> %    }%
> \newcounter{footnoteNum}% This will track footnote numbering for the superscript and for the ID.
> \colorlet{fncolor}{red!30!blue}% This is the footnote text coloring. This will allow users to renew this coloring to their own preference if they want to. The default here is a blue coloring. NOTE: Currently; trying to use `footnotecolor' (as a more descriptive color name) breaks everything on my system pretty spectacularly for some reason. This may be just mine or a clash somewhere in the ximera package, so for now I'm leaving it as `fncolor'.
> \renewcommand{\footnote}[1]{\ifvmode\ShowPar\fi
>     \stepcounter{footnoteNum}% Step the counter to make a new footnote
>     %% The following HCode should setup the javascript function that shows or hides the footnote. If you want to change the footnote location, you may want to change the 'inline' part of x.style.display = 'inline'; to another CSS display type, like 'block' or 'inherit'. Current the `x.display.color' seems to not be working.
>     \HCode{
>     <script type="text/javascript">
>             function footnotefunction(ID) {
>               var x = document.getElementById(ID);
>               if (x.style.display === "none") {
>                 x.style.color = "#002db3";
>                 x.style.display = "inline";
>               } else {
>                 x.style.display = "none";
>               }
>             }
>     </script>
>     }
>     %% The next command needs \expandafter in order to expand the counter footnoteNum into a roman character for the footnote ID. These seem to work better than arabic numerals in some cases, although why is not clear.
>     %% The next HCode controls the formatting for the actual footnote reference number (ie the superscript), but not the footnote itself.
>     \expandafter\HCode{
>     <span style=
>             "position=relative;
>             vertical-align=baseline;"
>             >
>             <button onclick="footnotefunction('footnote\roman{footnoteNum}')"
>                 style=
>                 "background:none!important;
>                  color:inherit;
>                  border:none;
>                  padding:0!important;
>                  font: inherit;
>                  cursor: pointer;"
>                 >
>              <sup>}[\arabic{footnoteNum}]\HCode{</sup></button>
>         }
>     %% The next command needs \expandafter in order to expand the counter footnoteNum into a roman character for the footnote ID. These seem to work better than arabic numerals in some cases, although why is not clear. Note that the ID counter style choice (roman vs arabic etc) needs to match the previous HCode choice.
>     %% Currently most of the formatting doesn't seem to work as intended, so that still needs to be figured out and fixed. Ideally we would have the footnote appear as a bubble above the footnote superscript when the footnote superscript is clicked.
>     \expandafter\HCode{
>             <span id="footnote\roman{footnoteNum}"
>                 style=
>                 "display:none;
>                 min-width:20em;
>                 position:relative;
>                 left:2px;
>                 padding:5px;
>                 color:#002db3;
>                 word-wrap:break-word;
>                 z-index=9999;
>                 overflow=auto;"
>                 >
>             }
>             \textcolor{fncolor}{(#1)}% Display the actual footnote here with color `fncolor' and within ()'s.
>         \HCode{</span></span>}
>     }% End of footnote definition.
> 
